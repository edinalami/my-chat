{"version":3,"sources":["Proxy.ts","EventProducer.ts","controls/TextInput.tsx","Login.tsx","ConversationCard.tsx","TextInputAndButton.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","sendPacket","type","email","password","displayName","staySignedIn","e","p","JSON","parse","data","alert","message","dispatch","console","log","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","Error","filter","args","call","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","register","displayNameRef","React","createRef","src","width","current","onClick","ref","href","preventDefault","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","TextInputAndButton","textInput","buttonContent","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","onBack","id","senderId","onSend","referenceTo","contentType","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.079c6789.chunk.js","sourcesContent":["import { MessageDto, InboxDto, IncomingPacket, OutgoingPacket } from \"./chat\";\r\nimport { EventProducer } from \"./EventProducer\";\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n\r\n    constructor() {\r\n        super()\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");  \r\n        this.ws.addEventListener( \"open\", () =>         \r\n        {    \r\n            //this.ws.send( \"Hello\" );     \r\n            this.sendPacket({type: \"register\", email: \"edina@gmaill.com\", password: \"asd\", displayName:\"edina\", staySignedIn: true})        \r\n        } );  \r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = JSON.parse(e.data) as IncomingPacket;\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    console.log(\"Bejelentkezve\")\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\nexport var proxy = new Proxy(); ","export class EventProducer<M> {\r\n\r\n    private listeners: { type: keyof M, listener: any, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n} ","import React, { Component } from 'react';\nimport './TextInput.css'\n\nexport interface TextInputOptions {\n    value?: string;\n    onChange?: (value: string) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?: string;\n    onEnter?: () => void;\n    autofocus?: boolean;\n};\n\nexport class TextInput extends Component<TextInputOptions>\n{\n    state = { value: this.props.value, focus: false };\n\n    render() {\n        let attrs = {} as any;\n        if (this.props.autofocus)\n            attrs.autoFocus = true;\n        if (this.props.onEnter)\n            attrs.onKeyDown = e => {\n                if (e.keyCode === 13)\n                    this.props.onEnter!();\n            };\n        return (\n            <div className=\"text-input\">\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\n                    onChange={e => {\n                        this.setState({ value: e.target.value });\n                        this.props.onChange?.(e.target.value);\n                    }}\n                    onBlur={() => this.setState({ focus: false })}\n                    onFocus={() => this.setState({ focus: true })}\n                    {...attrs} />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>);\n    }\n}","import React, { Component } from 'react';\r\nimport { proxy } from \"./Proxy\";\r\nimport { TextInput } from './controls/TextInput';\r\n\r\nexport class Login extends Component {\r\n\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    displayNameRef = React.createRef<TextInput>();\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => { this.setState({ email: e }); if (e === \"tftxg4\") { this.displayNameRef.current?.setState({ value: \"Edina\" }); } }} onEnter={() => this.onClick()} autofocus={true} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password}\r\n                    onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName} ref={this.displayNameRef}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} />}\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({ type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false });\r\n        else\r\n            proxy.sendPacket({ type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false });\r\n    }\r\n} ","import React, { Component } from 'react';\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && \" \" && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { TextInput, TextInputOptions } from './controls/TextInput';\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { InboxDto, ConversationDto } from './chat';\r\nimport { proxy } from \"./Proxy\";\r\nimport { ConversationCard } from './ConversationCard';\r\nimport { TextInputAndButton } from './TextInputAndButton';\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import React, { PureComponent } from 'react';\r\nimport { MessageDto } from './chat';\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from './Proxy';\r\nimport { TextInputAndButton } from './TextInputAndButton';\r\nimport { MessageCard } from './MessageCard';\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(\"T: \" + x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: text });\r\n        return true;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto } from './chat';\r\nimport { proxy } from \"./Proxy\";\r\nimport { LeftPane } from './LeftPane';\r\nimport { RightPane } from './RightPane';\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Login } from './Login';\nimport { Main } from './Main';\nimport { proxy } from './Proxy';\n\nexport default class App extends Component {\n  state = { showLogin: true };\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.state.showLogin ? <Login /> : <Main />}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    proxy.addEventListener(\"login\", () => { this.setState({ showLogin: false }) });\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}